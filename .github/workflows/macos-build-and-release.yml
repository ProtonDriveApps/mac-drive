name: macOS Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build and Release
    runs-on: macos-14
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
        
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.1'

    - name: List Available Schemes
      run: |
        echo "Available schemes:"
        xcodebuild -workspace ProtonDrive.xcworkspace -list
        echo "Workspace structure:"
        ls -R

    - name: Install dependencies
      run: brew install create-dmg

    - name: Build App
      run: |
        xcodebuild -workspace ProtonDrive.xcworkspace \
                  -scheme "ProtonDriveMac-Sparkle" \
                  -configuration Release \
                  -archivePath "build/ProtonDrive.xcarchive" \
                  archive CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO
                  
    - name: Upload Build Log
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: build-logs
        path: /Users/runner/Library/Developer/Xcode/DerivedData/**/Logs/Build